# =======================
# üß± System Utilities
# =======================
alias ibrew='arch -x86_64 /usr/local/bin/brew'
alias mbrew='arch -arm64e $MBREW_HOME/brew'
alias jsc=/System/Library/Frameworks/JavaScriptCore.framework/Versions/Current/Helpers/jsc
alias brew_python="/usr/local/opt/python@3.10/bin/python3.10"
alias py3=brew_python
alias va="vi ~/.alias"
alias sa="source ~/.alias"
alias ve="vi ~/.env"
alias se="source ~/.env"
alias sz="source ~/.zshrc"
alias uvruntrace="RUST_LOG=uv=trace uv run -v "
alias llm="/Users/kosiew/GitHub/llm/.venv/bin/llm"
alias strip-tags="/Users/kosiew/GitHub/strip-tags/.venv/bin/strip-tags" 
alias ttok="/Users/kosiew/GitHub/ttok/.venv/bin/ttok"

# Path to the central python alias CLI
ALIAS_PY="$HOME/GitHub/python-scripts/alias.py"

# Helper to run a subcommand of alias.py with arguments. Keeps wrappers DRY.
run_alias_py() {
  if [ -x "$ALIAS_PY" ] || [ -f "$ALIAS_PY" ]; then
  /usr/local/bin/python "$ALIAS_PY" "$@"
  else
    echo "‚ùå alias CLI not found at $ALIAS_PY" >&2
    return 1
  fi
}

encode_and_copy() {
  run_alias_py encode_and_copy "$1"
}

prettier_toggle() {
  run_alias_py prettier_toggle
}

chatmodes_copy() {
  run_alias_py chatmodes_copy "$1"
}
 

fselect() {
  mkdir -p ~/tmp
  local file action
  local initial_query="$1"

  file=$(fd --type f --hidden --no-ignore \
            --exclude .git/logs \
            --exclude .git/refs \
			--exclude node_modules \
			--exclude .DS_Store \
			--exclude __pycache__ \
        | fzf --height=40% --border \
              --preview 'bat --style=numbers --color=always {} || cat {}' \
              --query="$initial_query") || return

  echo "$file" | tee ~/tmp/.fzf_file >(pbcopy) >/dev/null

  action=$(printf "open\nedit (vi)\nedit (nano)\nedit (code)\ndelete\nmove\nrename\necho path\ncancel" | \
    fzf --prompt="Choose action for $(basename "$file"): ") || return

  case "$action" in
    open)
      open "$file"
      ;;
    "edit (vi)")
      mvim -c "syntax off" "$file"
      ;;
    "edit (nano)")
      nano "$file"
      ;;
    "edit (code)")
      code "$file"
      ;;
    delete)
      rm "$file"
      ;;
    move)
      local current_dir dest
      current_dir=$(dirname "$file")
      dest="$current_dir"
      echo "Move to (destination directory):"
      vared dest

      if [ -z "$dest" ]; then
        echo "‚ö†Ô∏è Move cancelled: no destination provided."
      elif [ "$dest" = "$current_dir" ]; then
        echo "‚ÑπÔ∏è Destination is the same as current. No move performed."
      else
        mkdir -p "$dest"
        mv "$file" "$dest/"
        echo "‚úÖ Moved to $dest/"
      fi
      ;;
    rename)
      local current_name newname
      current_name=$(basename "$file")
      newname="$current_name"
      echo "Rename to (new filename):"
      vared newname

      if [ -z "$newname" ]; then
        echo "‚ö†Ô∏è Rename cancelled: no name provided."
      elif [ "$newname" = "$current_name" ]; then
        echo "‚ÑπÔ∏è Same name entered. No rename performed."
      else
        mv "$file" "$(dirname "$file")/$newname"
        echo "‚úÖ Renamed to $newname"
      fi
      ;;
    "echo path")
      echo "$file"
      ;;
    cancel)
      echo "Action cancelled."
      ;;
    *)
      echo "Unknown action: $action"
      ;;
  esac
}

chezcrypt() {
  run_alias_py chezcrypt "$@"
}

chezupdate() {
  run_alias_py chezupdate "$@"
}

chezadd() {
  run_alias_py chezadd "$@"
}

chezsync() {
  run_alias_py chezsync "$@"
}

off() {
  echo "üóÇÔ∏è Running chezsync before shutdown..."
  chezsync || { echo "‚ùå chezsync failed. Aborting shutdown."; return 1; }

  echo -n "üîí Proceed to shut down your Mac? [y/N] "
  read confirm
  if [[ "$confirm" =~ ^[Yy]$ ]]; then

    echo "üçé Initiating graceful macOS shutdown..."
    osascript -e 'tell application "System Events" to shut down'
  else
    echo "‚ùå Shutdown cancelled."
  fi
}
      

cdiff() {
  run_alias_py cdiff "$@"
}
 
weekly_zcompdump_cleaner() {
  run_alias_py weekly_zcompdump_cleaner 
}


# ====================
# üß† General Tools
# ====================
alias nyd="npx prisma migrate dev && yd"
alias nh="npx hardhat"

copyfromurl() {
  run_alias_py copyfromurl "$@"
}
 

# ====================
# üßπ Yarn & JS Tooling
# ====================
# alias y="yarn"
# alias yt="y typecheck"
# alias ytest="y test:fast:watch"
# alias pp="y prettier:write && y eslint . --fix --ext .js,.jsx,.ts,.tsx && g st"
# alias gpp="yt && pp"
# alias yac="y allchecks"
# alias yd="y && y dev"
# alias ydf="y && NODE_ENV=development y vite --force"
# alias yptt="y playwright test --trace=on "
# alias yptc="y playwright test --trace=on --project=chromium "
# alias yptf="y playwright test --trace=on --project=firefox "
# alias yptr="y playwright test --trace=on --workers=5 --repeat-each=5 "
# alias pyptt="PWDEBUG=1 yptt"
# alias pyptc="PWDEBUG=1 yptc"
# alias cypt="CI=true yptt --project=firefox --project=chromium --workers=10 " 

# =======================
# üìù Text Editors & Notes
# =======================
alias vim=mvim
alias mvi=mvim
alias vi=mvim
alias journal="mvim $JOURNAL"
alias weeknotes="mvim $WEEK_NOTES"
alias kfm="mvim $KFM"
alias kfm_history="mvim $KFM_HISTORY"
alias boo="mvim $BOO"
alias boo_history="mvim $BOO_HISTORY"
alias inotes="mvim $INVESTMENT_JOURNAL"
alias scrap="mvim $SCRAP"
# alias history="mvim $HISTORY"
alias tickets="mvim $CLOUD/A8C/KeyboardMaestro/08_Interactions.txt"
alias links="mvim $CLOUD/A8C/KeyboardMaestro/09_TodoLinks.txt"
alias watches="open ~/myonedrive/Watches/watches.xlsm"

# =======================
# üåç Network & Connectivity
# =======================
alias vpn_check="dig +short -x `curl -s 'https://en.wordpress.com/whatismyip?'`"
alias ping8="ping 8.8.8.8"
alias updchrome="mbrew cask upgrade chromedriver"
alias wifi_reset="networksetup -setairportpower Wi-Fi off && networksetup -setairportpower Wi-Fi on"

# =======================
# üîó Web & Browsers
# =======================
alias firefox="/Applications/Firefox.app/Contents/MacOS/firefox "
alias firefoxhl="firefox -no-remote  -P Headless -headless "
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias chromehl="chrome --headless --dump-dom "
alias upext='cd ~/wp-local-docker-sites/wpstore101-test/wordpress/wp-content/wc-prods && sh upext.sh && cd ~'

# =======================
# üíª Tmux
# =======================
alias tmux-rename="tmux rename-session -t \$(tmux display-message -p '#S')"

tmux-switch() {
  local session
  session=$(tmux list-sessions -F "#S" | fzf --prompt="Select tmux session: ")
  if [ -n "$session" ]; then
    if [ -z "$TMUX" ]; then
      tmux attach -t "$session"
    else
      tmux switch-client -t "$session"
    fi
  fi
}  

tmux-new() {
  if [ -z "$1" ]; then
    echo "Usage: tmux-new <session-name>"
    return 1
  fi

  if tmux has-session -t "$1" 2>/dev/null; then
    echo "Session '$1' already exists. Attaching..."
    tmux attach -t "$1"
  else
    tmux new-session -s "$1"
  fi
}

tmux-kill-unattached() {
  tmux list-sessions | grep -v '(attached)' | cut -d: -f1 | while read -r session; do
    echo "Killing session: $session"
    tmux kill-session -t "$session"
  done
}

update_tmux_window_name() {
  if [[ -n "$TMUX" ]]; then
    local folder_name
    folder_name=$(basename "$PWD")
    printf "\033]2;%s\033\\" "$folder_name"
  fi
}

# Run it on every directory change
precmd() { update_tmux_window_name }

# =======================
# üßëüíª Git & Branching
# =======================
alias g=/opt/homebrew/bin/git
# To retrieve the description of the currently checked-out Git branch 
alias gbd='BRANCH="$(git symbolic-ref --short HEAD)" && DESCRIPTION_PROPERTY="branch.${BRANCH}.description" && git config --get "$DESCRIPTION_PROPERTY"'
# pretty-print branch information using git bi 
alias gbi="git bi | column -ts'|'"
alias glo="git log --since=yesterday.midnight --oneline --graph --color=always --pretty=format:'%C(auto)%h%d %s' | perl -pe 's/^((?:(?!m).)* )/sprintf(\"%3s\", \$.) . \"* \"/e'"
alias gmp="git checkout main && git pull && git co -"
alias gmm="git merge main"
alias gpatch="git diff > wip.patch && git checkout ."
# back to how it was last commit 
alias grestore="git restore --staged . && git restore . && git clean -fd"
alias gbinfo="git branch --sort=-committerdate --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always | column -ts'|'"

alias gco="git checkout \"\$(git branch | sed 's/^..//' | fzf)\""
# g sync main
# alias gsm="git checkout main && gsync && g cob"

gsm() {
  run_alias_py gsm "$@"
}

branches() {
  branch=""
  branches=`git branch --list`
  red='\033[0;31m'
  yellow='\033[0;33m'
  green='\033[0;32m'
  clear='\033[0m'
  while read -r branch; do
    clean_branch_name=${branch//\*\ /}
    description=`git config branch.$clean_branch_name.description`
    printf "%-15s %s\n ${yellow}${branch}${clear}    ${green}$description${clear}"
  done <<< "$branches"
}

# git delete branch local, remote

gdb() {
  run_alias_py gdb "$@"
}

 

# git diff --name-only
# gdn() {
#   local branch="${1:-main}"
#   git diff --name-only "$branch" | vi -
# }
gdn() {
  run_alias_py gdn "$@"
}

 
gcom() {
  run_alias_py gcom "$@"
}

gsync() {
  run_alias_py gsync "$@"
}

# Squash commit range (c1^..c2) into ONE commit using _gcommit_with_message,
# then apply the squashed history back to a target branch in one go.
#
# Usage:
#   gsquash <c1> <c2> [-t <target-branch>] [-F] [-k] [-- <message...>]
#
# Flags:
#   -t, --to         Target branch to update (default: current branch)
#   -F, --force-push Force-push target branch to its upstream after rewrite
#   -k, --keep-temp  Keep the temporary squash branch (default: delete it)
gsquash() {
  run_alias_py gsquash "$@"
}

gggrbi() {
  run_alias_py gggrbi "$@"
}

gacommit() {
  run_alias_py gacommit "$@"
}
 
#auto commit message for staged files 

_gcommit_with_message() {
  run_alias_py gcommit "$@"
}

gcommit() {
  run_alias_py gcommit "$@"
}

# copy HEAD commit hash
gcopyhash() {
  run_alias_py gcopyhash "$@"
}
 
gcopybranch() {
  run_alias_py gcopybranch "$@"
}

# create branch test with commit point

gtest() {
  run_alias_py gtest "$@"
}

 
gfilecommit() {
  run_alias_py gfilecommit "$@"
}

# git commit unstaged files individually
gfcommit() {
  run_alias_py gfcommit "$@"
}
 

gsplit() {
  run_alias_py gsplit "$@"
}

# Apply a patch from the clipboard (handles heredoc-wrapped commands too)
# Build clean patch: drop code fences, start at first 'diff --git', normalize CRLF
gappdiff() {
  run_alias_py gappdiff "$@"
}

grevdiff() {
  run_alias_py grevdiff "$@"
}

 

gadded() {
  run_alias_py gadded "$1"
}

# Rebase a range and add Signed-off-by to each commit.
# Usage:
#   gsign <upstream|range> [--autosquash] [--rebase-merges]
#
# Examples:
#   gsign main            # rebase commits since main (i.e., main..HEAD)
#   gsign main..HEAD      # same as above
#   gsign abc123..def456  # rebase commits in that explicit range
#   gsign main --autosquash
#   gsign main --rebase-merges
gsign() {
  run_alias_py gsign "$@"
}

# find commit hash of pr number
gprhash() {
  run_alias_py gprhash "$1"
}

# git diff
gdiff() {
  run_alias_py gdiff "$@"
}

gs() {
  run_alias_py gs "$@"
}

grmuntracked() {
  run_alias_py grmuntracked "$@"
}
 

# git new branch

gnb() {
  run_alias_py gnb "$@"
}
 

# go git manager
ggm() {
  /Users/kosiew/GitHub/go_git_manager/git_branch_manager "$@"
}

# =======================
# üêç Python & Virtual Environments
# =======================

pipinstall() {
  if [ $# -eq 0 ]; then
    echo "Please provide at least one package name."
    return 1
  fi
  for package in "$@"; do
    pip install -U "$package" > /dev/null
    if [ $? -eq 0 ]; then
      echo "Installation of $package successful."
    else
      echo "Installation of $package failed."
    fi
  done
}

pipuninstall() {
  if [ $# -eq 0 ]; then
    echo "Please provide at least one package name."
    return 1
  fi
  for package in "$@"; do
    pip uninstall -y "$package" > /dev/null
    if [ $? -eq 0 ]; then
      echo "Uninstallation of $package successful."
    else
      echo "Uninstallation of $package failed."
    fi
  done
}

pythoninfo() {
  echo "Python Version:"
  python --version
  echo -e "
Installed Packages:"
  pip freeze
}

create_venv() {
  VENV_DIR=".venv"
  if [ ! -d "$VENV_DIR" ]; then
    echo "üõ†Ô∏è Creating virtual environment..."
    python -m venv "$VENV_DIR"
  else
    echo "‚úÖ Virtual environment already exists."
  fi
}

activate_venv() {
  VENV_DIR=".venv"
  if [ -f "$VENV_DIR/bin/activate" ]; then
    echo "‚ö° Activating virtual environment..."
    source "$VENV_DIR/bin/activate"
  else
    echo "‚ùå No virtual environment found. Run create_venv first."
    return 1
  fi
}

upgrade_pip() {
  echo "üì¶ Upgrading pip..."
  pip install --upgrade pip
}

pip_install_requirements() {
  if [ -f "requirements.txt" ]; then
    echo "üìÑ Installing dependencies from requirements.txt..."
    pip install -r requirements.txt
  else
    echo "‚ùå requirements.txt not found!"
    return 1
  fi
}

venvsetup() {
  create_venv
  activate_venv
  upgrade_pip
  pip_install_requirements
  echo "üéâ Dev environment is ready and activated!"
}
 
z_activate_venv() {
  if [ -d "$VENV_PATH" ]; then
    echo "Activating virtual environment at $VENV_PATH"
    source "$VENV_PATH/bin/activate"
  else
    echo "VENV_PATH not found"
    return 1
  fi
}

z_mkvenv() {
  if [ -z "$1" ]; then
    echo "Please provide a name for the virtual environment."
    return 1
  fi
  VENV_NAME="$1"
  VENV_PATH="$VENV_ROOT/$VENV_NAME"
  ACTIVATE_SCRIPT="$(pwd)/activate_venv.sh"
  PYTHON_VERSION=${2:-3.12}
  PYTHON_PATH="/opt/homebrew/bin/python${PYTHON_VERSION}"
  if [ ! -x "$PYTHON_PATH" ]; then
    echo "Python version $PYTHON_VERSION not found at $PYTHON_PATH."
    return 1
  fi
  "$PYTHON_PATH" -m venv "$VENV_PATH"
  if [ $? -eq 0 ]; then
    echo "Virtual environment '$VENV_NAME' created at $VENV_PATH using Python $PYTHON_VERSION."
    source "$VENV_PATH/bin/activate"
    python --version
    deactivate
    echo "#!/bin/zsh
VENV_PATH=\"$VENV_PATH\" activate_venv" > "$ACTIVATE_SCRIPT"
    chmod +x "$ACTIVATE_SCRIPT"
    echo "Activation script created at $ACTIVATE_SCRIPT."
  else
    echo "Failed to create virtual environment '$VENV_NAME'."
  fi
}

z_activatevenv() {
  if [ -z "$1" ]; then
    echo "Please provide the name of the virtual environment."
    return 1
  fi
  VENV_PATH="$VENV_ROOT/$1/bin/activate"
  if [ -f "$VENV_PATH" ]; then
    source "$VENV_PATH"
    echo "Activated virtual environment: $1"
  else
    echo "Virtual environment '$1' not found."
  fi
}

z_rmvenv() {
  if [ -z "$1" ]; then
    echo "Please provide the name of the virtual environment to remove."
    return 1
  fi
  VENV_NAME="$1"
  VENV_PATH="$VENV_ROOT/$VENV_NAME"
  if [ -d "$VENV_PATH" ]; then
    rm -rf "$VENV_PATH"
    echo "Virtual environment '$VENV_NAME' removed."
  else
    echo "Virtual environment '$VENV_NAME' not found."
  fi
}

z_cdvenv() {
  if [ -z "$VIRTUAL_ENV" ]; then
    echo "No virtual environment is currently activated."
    return 1
  fi
  cd "$VIRTUAL_ENV" || return 1
  echo "Changed directory to the virtual environment: $VIRTUAL_ENV"
}

z_lsvenv() {
  VENV_DIR="$VENV_ROOT"
  if [ ! -d "$VENV_DIR" ]; then
    echo "Virtual environment directory $VENV_DIR does not exist."
    return 1
  fi
  echo "Listing virtual environments in $VENV_DIR:"
  ls -1 "$VENV_DIR"
}

# ====================
# üõ†Ô∏è Misc Tools
# ====================
alias files-to-prompt="/Users/kosiew/GitHub/files-to-prompt/.venv/bin/files-to-prompt"
alias sklearn_label="/Users/kosiew/GitHub/gmail-ai-labeller/.venv/bin/python /Users/kosiew/GitHub/gmail-ai-labeller/gmail_labeller.py sklearn-label"

alias rgrs="rg -g '*.rs' -g '*.py'" 

# ====================
# üß™ Python Utilities
# ====================
alias td="python3 $PYTHON_SOURCE/todo/todo.py "
alias bw="python3 $PYTHON_SOURCE/bv_wordpress.py "
alias ba="python3 $PYTHON_SOURCE/bv_automattic.py "
alias pulse="python3 $PYTHON_SOURCE/bv_speedtest.py pulse"
alias pytest3="python3 -m pytest"
alias open_urls="python3 $PYTHON_SOURCE/open_urls.py "
alias say="python3 say.py say " 

# ====================
# üêò Postgres
# ====================
alias psqlstart="mbrew services start postgresql@14"
alias psqlstop="mbrew services stop postgresql@14" 

# ====================
# üß† Dev Navigation
# ====================
alias zp="cd ~/Cloud/Source/python3"
alias zap="cd /Users/kosiew/Library/Application\ Support/Alfred/Alfred.alfredpreferences/workflows/"
#alias zap = "cd /Users/kosiew/Library/CloudStorage/OneDrive-Personal/A8C/Alfred/Alfred.alfredpreferences/workflows/" 
alias lrt="eza -l -snew "

# ====================
# üß† Editor
# ====================
alias icode="code-insiders"

# ====================
# üó£Ô∏è Audio / Whisper
# ====================
alias whisper="/Users/kosiew/github/whisper.cpp/main -m models/ggml-large-v2.bin"

# ====================
# üåç Docker UI
# ====================
alias openwebui="docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main"

mobydev() {
  docker run --rm -it --privileged \
    --name moby-dev \
    -e BUILDFLAGS \
    -e DOCKER_BUILD_PKGS \
    -e DOCKER_DEBUG \
    -e DOCKER_EXPERIMENTAL \
    -e DOCKER_GITCOMMIT \
    -e DOCKER_GRAPHDRIVER=vfs \
    -v "$(pwd):/go/src/github.com/docker/docker" \
    docker-dev bash
}
 

# =======================
# ü¶Ä Rust / Cargo Tools
# =======================
alias c=/Users/kosiew/.cargo/bin/cargo
alias find_rust_import="python /Users/kosiew/GitHub/python-scripts/rust_tools.py find-rust-imports "
alias craft_test="python /Users/kosiew/GitHub/python-scripts/rust_tools.py craft-test "
alias fri=find_rust_import

rust_clippy() {
  run_alias_py rust_clippy "$@"
}

 
# cargo check
ccheck() {
  run_alias_py ccheck "$@"
}

crun() {
  run_alias_py crun "$@"
}

# cargo test log

ctest() {
  run_alias_py ctest "$@"
}

# =======================
# ü§ñ LLM Tools
# =======================
# vi models set up for llm
alias llm_models="vi /Users/kosiew/Library/Application\ Support/io.datasette.llm/extra-openai-models.yaml"
alias llm_aliases="vi /Users/kosiew/Library/Application Support/io.datasette.llm/aliases.json"

# =======================
# üß† Issue Analysis Commands (refactored to Python)
# =======================

icomment() {
  run_alias_py icomment "$@"
}

irespond() {
  run_alias_py irespond "$@"
}

isum() {
  run_alias_py isum "$@"
}

isum_clip() {
  run_alias_py isum-clip "$@"
}

ideep() {
  run_alias_py ideep "$@"
}

icodex() {
  run_alias_py icodex "$@"
}

iprfb() {
  run_alias_py iprfb "$@"
}

icask() {
  run_alias_py icask "$@"
}

ictriage() {
  run_alias_py ictriage "$@"
}

iask() {
  run_alias_py iask "$@"
}

imuse() {
  run_alias_py imuse "$@"
}

# =======================
# üîß Development Tools
# =======================

itry() {
  if [ "$1" = "--help" ]; then
    echo "Usage: itry [packages...]"
    echo "Example: itry llm sqlite-utils datasette"
    return 0
  fi
  local args=()
  for pkg in "$@"; do
    args+=("--with" "$pkg")
  done
  uvx "${args[@]}" --python 3.13 ipython
}

# =======================
# üß∞ Utility Functions
# =======================

findfile() {
  if [ -z "$1" ]; then
    echo "Usage: findfile <filename>"
    return 1
  fi

  echo "=== Searching in Current Directory ==="
  find . -iname "$1" 2>/dev/null
}

 

alias-find() {
  if [ -z "$1" ]; then
    echo "Usage: alias-find <search-term>"
    return 1
  fi

  echo "=== Aliases ==="
  alias | grep -i --color=always "$1"
  
  echo -e "\n=== Functions ==="
  # Search function names only (including hyphens in function names)
  declare -f | grep -E "^[a-zA-Z_][a-zA-Z0-9_-]* \(\)" | grep -i --color=always "$1"
}

 
check_filename() {
  if [ -z "$1" ]; then
    echo "Usage: $2 <filename>"
    return 1
  fi
}

get_commit_history() {
  local FILENAME=$1
  git log --oneline --pretty=format:"%h %s %Cgreen(%ar)" -- "$FILENAME"
}

git_log_copy() {
  check_filename "$1" "git_log_copy" || return 1
  get_commit_history "$1" | pbcopy
  echo "Commit history copied to clipboard."
}

git_diff_commits() {
  check_filename "$1" "git_diff_commits" || return 1
  local FILENAME=$1
  local COMMITS=($(pbpaste | awk '{print $1}'))
  for COMMIT in "${COMMITS[@]}"; do
    echo -e "
==== Diff for commit $COMMIT ===="
    git diff $COMMIT^! -- "$FILENAME"
  done
}

git_log_and_diff() {
  check_filename "$1" "git_log_and_diff" || return 1
  local FILENAME=$1
  git_log_copy "$FILENAME"
  git_diff_commits "$FILENAME"
}

files_to_prompt_command() {
  local search_term="$1"
  shift
  local rg_options=()
  local file_extensions=()
  for arg in "$@"; do
    if [[ "$arg" == -* ]]; then
      rg_options+=("$arg")
    else
      file_extensions+=("-g" "$arg")
    fi
  done
  if [ ${#file_extensions[@]} -eq 0 ]; then
    file_extensions=("-g" "*.rs" "-g" "*.py")
  fi
  local rg_cmd=(rg -l "${rg_options[@]}" "${file_extensions[@]}" "$search_term")
  echo "Running command: ${rg_cmd[*]}" >&2
  echo "" >&2
  local files=( $(${rg_cmd[*]}) )
  if [ ${#files[@]} -eq 0 ]; then
    echo "No files found."
    return 1
  fi
  command="files-to-prompt -c \
"
  for file in "${files[@]}"; do
    command+=" ${file} \
"
  done
  command+=" | vi -"
  echo "$command"
  echo "$command" | pbcopy
}
# =======================

# Function: Clean tmp files older than given days (default 30)
cleantmp() {
  run_alias_py cleantmp "$@"
}

# Hook: Run cleantmp once a week with macOS notification
autoload -U add-zsh-hook

weekly_tmp_cleaner() {
  run_alias_py weekly_tmp_cleaner
}

daily_prefixed_cleaner() {
  run_alias_py daily_prefixed_cleaner
}

add-zsh-hook precmd weekly_tmp_cleaner
add-zsh-hook precmd daily_prefixed_cleaner
add-zsh-hook precmd weekly_zcompdump_cleaner
